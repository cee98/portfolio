class Discriminator(nn.Module):

    """
    Discriminator for GAN to classify input images as real or fake.

    Attributes:
        - conv1 (nn.Conv2d): The first convolutional layer with 32 output channels.
        - relu (nn.LeakyReLU): Leaky ReLU activation function with a slope of 0.2.
        - conv2 (nn.Conv2d): The second convolutional layer with 128 output channels.
        - bn1 (nn.BatchNorm2d): Batch normalization after the second convolutional layer.
        - conv3 (nn.Conv2d): The third convolutional layer with 256 output channels.
        - bn2 (nn.BatchNorm2d): Batch normalization after the third convolutional layer.
        - conv4 (nn.Conv2d): The fourth convolutional layer with 256 output channels.
        - bn3 (nn.BatchNorm2d): Batch normalization after the fourth convolutional layer.
        - fc_input_size (int): The size of the fully connected layer's input after the convolutional layers.
        - fc1 (nn.Linear): The first fully connected layer with 512 output features.
        - bn4 (nn.BatchNorm1d): Batch normalization after the first fully connected layer.
        - fc2 (nn.Linear): The second fully connected layer with a single output for binary classification.
        - sigmoid (nn.Sigmoid): Sigmoid activation function for binary classification.

    Methods:
        - forward(x): Forward pass of the discriminator network.
    """
    def __init__(self):
        super(Discriminator, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, 5, padding=2, stride=1)
        self.relu = nn.LeakyReLU(0.2)
        self.conv2 = nn.Conv2d(32, 128, 5, padding=2, stride=2)
        self.bn1 = nn.BatchNorm2d(128, momentum=0.9)
        self.conv3 = nn.Conv2d(128, 256, 5, padding=2, stride=2)
        self.bn2 = nn.BatchNorm2d(256, momentum=0.9)
        self.conv4 = nn.Conv2d(256, 256, 5, padding=2, stride=2)
        self.bn3 = nn.BatchNorm2d(256, momentum=0.9)

        # Calculate the size of the fully connected layer input
        self.fc_input_size = 256 * 16 * 16  # Adjusted for input size [4, 1, 128, 128]

        self.fc1 = nn.Linear(self.fc_input_size, 512)  # Adjusted input size
        self.bn4 = nn.BatchNorm1d(512, momentum=0.9)
        self.fc2 = nn.Linear(512, 1)
        self.sigmoid = nn.Sigmoid()

        nn.init.constant_(self.conv1.bias, 0.0)
        nn.init.constant_(self.conv2.bias, 0.0)
        nn.init.constant_(self.conv3.bias, 0.0)
        nn.init.constant_(self.conv4.bias, 0.0)
        nn.init.constant_(self.fc1.bias, 0.0)
        nn.init.constant_(self.fc2.bias, 0.0)

    def forward(self, x):
        """
        Forward pass of the discriminator network.

        Args:
            x (torch.Tensor): Input tensor, typically representing an image or a batch of images.

        Returns:
            Tuple[torch.Tensor, torch.Tensor]: A tuple containing two tensors:
            - The first tensor (x): The discriminator's binary classification output, where values closer to 1 indicate a
              prediction of a real image, and values closer to 0 indicate a prediction of a fake image.
            - The second tensor (x1): The intermediate representation after the convolutional layers for
              feature extraction or visualization.

        """
        batch_size = x.size()[0]
        x = self.relu(self.conv1(x))
        x = self.relu(self.bn1(self.conv2(x)))
        x = self.relu(self.bn2(self.conv3(x)))
        x = self.relu(self.bn3(self.conv4(x)))

        # Reshape x to match the size of the fully connected layer input
        x = x.view(-1, self.fc_input_size)

        x1 = x
        x = self.relu(self.bn4(self.fc1(x)))
        #final layer
        x = self.sigmoid(self.fc2(x))

        return x, x1
# Initialize discriminator instances
discriminator = Discriminator()

# Function to count parameters in a model
def count_parameters(model):
    return sum(p.numel() for p in model.parameters() if p.requires_grad)

# Count and print parameters for the discriminator
print("Discriminator:")
for name, param in discriminator.named_parameters():
    if param.requires_grad:
        print(f"{name}: {param.numel()} parameters")

# Total trainable parameters
total_parameters = count_parameters(discriminator)
print(f"\nTotal Trainable Parameters: {total_parameters}")
